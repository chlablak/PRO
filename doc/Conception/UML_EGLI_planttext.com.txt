@startuml

hide empty attributes
hide empty methods
skinparam classAttributeIconSize 0

namespace egli:: {

Data "0..1" --> "1" VariableTable : -variables >
std::runtime_error <|-- Exception
FunctionTable "*" --> "*" FunctionCaller : -functions >
Interpreter "*" --> "0..1" Data : -data >
Interpreter "0..1" --> "1" FunctionTable : -functions >
Interpreter "0..1" --> "1" Parser : -parser >
Statement "*" --> "1" StatementType : +type >
Statement "*" --> "1" StatementConstantType : +constantType >
Statement "0..1" --> "*" Statement : +parameters >

Exception <.. Interpreter : throws <
ProcessingUnit <.. Interpreter : uses <
Statement <.. Interpreter : return <

note "reals types classes are not shown" as N2 
N2 .. Type

namespace detail:: {
    note "implementation defined" as N1
}

class Array {
    + Array()
    + Array(const std::vector<T>& v)
    + void add(const T& value)
    + const T& get(size_t i) const
    + size_t size() const
    + vector<T> toVector() const
    + Type typeOf(size_t i) const
}

class Data #yellow {
    + Data()
    - Data(const Data&)
    - Data& operator=(const Data&)
    + void clear()
    + VariableTable& variables()
    + const VariableTable& variables() const
}

class Exception {
    + Exception(...)
}

class FunctionTable {
    + FunctionTable()
    - FunctionTable(const FunctionTable&)
    - FunctionTable& operator=(const FunctionTable&)
    + void execute(...) const
    + bool exists(const std::string &name) const
    + std::list<std::string> find(const std::string &prefix) const
    + void interface(const std::string &name, FunctionT func)
    + bool match(...) const
    + std::list<Type> returnType(const std::string &name) const
}

class Interpreter #yellow {
    + Interpreter()
    + Interpreter(Data *data)
    - Interpreter(const Interpreter&)
    - Interpreter& operator=(const Interpreter&)
    + Data* data()
    + const Data* data() const
    + FunctionTable& functions()
    + const FunctionTable& functions() const
    + Statement next()
    + size_t available()
    + void setData(Data* data)
    + std::ostream& writer()
}

class Parser {
    + Parser()
    - Parser(const Parser&)
    - Parser& operator=(const Parser&)
    + Statement parse(const std::string& input)
}

class ProcessingUnit {
    + {static} void check(const Statement& statement, ...)
    + {static} void process(Statement& statement, ...)
}

enum StatementType {
    None
    Assignation
    FunctionCall
    Constant
    Variable
    Array
}
enum StatementConstantType {
    None
    Float
    Integer
    Boolean
    String
}
class Statement {
    + Statement(...)
    + transformToVariable(const std::string& value)
    + std::string value
}

class VariableTable {
    + VariableTable()
    + void clear()
    + void copy(const std::string& dst, const std::string& src)
    + void enter()
    + void erase(const std::string& name)
    + bool exists(const std::string& name) const
    + std::list<std::string> find(const std::string& prefix) const
    + const T& get(const std::string& name) const
    + bool isTemporary(const std::string& name) const
    + void leave()
    + void move(const std::string& dst, const std::string& src)
    + std::string nextTemporaryName()
    + void set(const std::string& name, const T& value)
    + std::string setTemporary(const T& value)
    + std::string toString(const std::string& name) const
    + Type typeOf(const std::string& name) const
}

enum Type {
    Array
    Boolean
    Edge
    Float
    Graph
    Integer
    Number
    String
    Vertex
}

abstract class FunctionCaller {
    + {abstract} size_t arity() const
    + {abstract} void execute(...) const
    + {abstract} bool match(...) const
    + {abstract} Type parameterType(size_t i) const
    + {abstract} Type returnType() const
}

}

@enduml